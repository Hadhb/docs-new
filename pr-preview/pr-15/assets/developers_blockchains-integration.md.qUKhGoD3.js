import{_ as a,c as i,o as e,U as t}from"./chunks/framework.lH7PT3ke.js";const d=JSON.parse('{"title":"Blockchains Integration","description":"","frontmatter":{"prev":{"text":"Mobile Wallet Integration","link":"./mobile-wallet"},"next":{"text":"Akash (AKT)","link":"./akash"},"head":[["meta",{"name":"og:title","content":"Blockchains Integration | XDEFI Dev Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/blockchains-integration.md","filePath":"developers/blockchains-integration.md","lastUpdated":1710751208000}'),o={name:"developers/blockchains-integration.md"},l=t('<h1 id="blockchains-integration" tabindex="-1">Blockchains Integration <a class="header-anchor" href="#blockchains-integration" aria-label="Permalink to &quot;Blockchains Integration&quot;">​</a></h1><h3 id="native-blockchains-support" tabindex="-1">Native blockchains support <a class="header-anchor" href="#native-blockchains-support" aria-label="Permalink to &quot;Native blockchains support&quot;">​</a></h3><ul><li><a href="./akash">Akash (AKT)</a></li><li><a href="./arbitrum">Arbitrum (AETH)</a></li><li><a href="./aurora">Aurora (AURORA)</a></li><li><a href="./avalanche">Avalanche (AVAX)</a></li><li><a href="./axelar">Axelar (AXL)</a></li><li><a href="./bitcoin">Bitcoin (BTC)</a></li><li><a href="./bitcoin-cash">Bitcoin Cash (BCH)</a></li><li><a href="./bnb-beacon-chain">BNB Beacon Chain (BNB)</a></li><li><a href="./bnb-smart-chain">BNB Smart Chain (BNB)</a></li><li><a href="./canto">Canto (CANTO)</a></li><li><a href="./cosmos">Cosmos (ATOM)</a></li><li><a href="./crescent">Crescent (CRE)</a></li><li><a href="./cronos">Cronos (CRO)</a></li><li><a href="./dogecoin">Dogecoin (DOGE)</a></li><li><a href="./ethereum">Ethereum (ETH)</a></li><li><a href="./fantom">Fantom (FTM)</a></li><li><a href="./gnosis">Gnosis (xDAI)</a></li><li><a href="./juno">Juno (JUNO)</a></li><li><a href="./kava">Kava (KAVA)</a></li><li><a href="./klaytn">Klaytn (KLAY)</a></li><li><a href="./kujira">Kujira (KUJI)</a></li><li><a href="./litecoin">Litecoin (LTC)</a></li><li><a href="./mars">Mars (MARS)</a></li><li><a href="./maya">Maya Protocol (MAYA)</a></li><li><a href="./near">Near Protocol (NEAR)</a></li><li><a href="./optimism">Optimism (ETH)</a></li><li><a href="./osmosis">Osmosis (OSMO)</a></li><li><a href="./polygon">Polygon (MATIC)</a></li><li><a href="./sei">Sei Testnet (SEI)</a></li><li><a href="./solana">Solana (SOL)</a></li><li><a href="./stargaze">Stargaze (STARS)</a></li><li><a href="./stride">Stride (STRD)</a></li><li><a href="./terra">Terra (LUNA)</a></li><li><a href="./thorchain">THORChain (RUNE)</a></li><li><a href="./tron">Tron (TRX)</a></li></ul><h3 id="custom-blockchains-support" tabindex="-1">Custom blockchains support <a class="header-anchor" href="#custom-blockchains-support" aria-label="Permalink to &quot;Custom blockchains support&quot;">​</a></h3><ul><li><strong>EVM&#39;s</strong> (Mainnet &amp; Testnet)</li><li><strong>Cosmos chains</strong> (Mainnet &amp; Testnet)</li></ul><p>For both of them, interacting with a dApp will automatically ask you to add the new network while connecting to it. Otherwise, you can add and manage custom networks manually by going into the &quot;Settings&quot; tab and click on the &quot;Network setting&quot; line.</p>',6),n=[l];function r(s,h,c,f,m,u){return e(),i("div",null,n)}const k=a(o,[["render",r]]);export{d as __pageData,k as default};
